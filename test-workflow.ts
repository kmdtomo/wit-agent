#!/usr/bin/env tsx

import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

// __dirname„ÇíÂÆöÁæ©
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// .env.local„Åã„ÇâÁí∞Â¢ÉÂ§âÊï∞„ÇíË™≠„ÅøËæº„Åø
dotenv.config({ path: path.join(__dirname, '.env.local') });

// ÂøÖË¶Å„Å™„É¢„Ç∏„É•„Éº„É´„Çí„Ç§„É≥„Éù„Éº„Éà
import { ComplianceWorkflow } from './src/mastra/workflows/compliance-workflow';

// ÂÆüË°åÈñ¢Êï∞
async function testWorkflow() {
  const recordId = process.argv[2] || '9559';
  
  console.log('========================================');
  console.log('WIT Agent - Compliance Workflow Test');
  console.log('========================================');
  console.log(`Record ID: ${recordId}`);
  console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log('');
  
  try {
    const workflow = new ComplianceWorkflow();
    
    console.log('üöÄ Starting compliance analysis...\n');
    const startTime = Date.now();
    
    const result = await workflow.execute(recordId);
    
    const endTime = Date.now();
    const duration = ((endTime - startTime) / 1000).toFixed(2);
    
    console.log('\n========================================');
    console.log('üìä Analysis Results');
    console.log('========================================');
    console.log(JSON.stringify(result, null, 2));
    
    console.log('\n========================================');
    console.log('üìà Summary');
    console.log('========================================');
    console.log(`‚è±Ô∏è  Duration: ${duration} seconds`);
    console.log(`üìù Total Score: ${result.overallScore}/100`);
    console.log(`‚ö†Ô∏è  Risk Level: ${result.riskLevel}`);
    console.log(`üö© Red Flags: ${result.redFlags.length}`);
    console.log(`‚úÖ Recommendations: ${result.recommendations.length}`);
    
    if (result.redFlags.length > 0) {
      console.log('\nüö® Critical Issues:');
      result.redFlags.forEach((flag, i) => {
        console.log(`   ${i + 1}. ${flag.description}`);
      });
    }
    
    if (result.recommendations.length > 0) {
      console.log('\nüí° Top Recommendations:');
      result.recommendations.slice(0, 3).forEach((rec, i) => {
        console.log(`   ${i + 1}. ${rec}`);
      });
    }
    
    console.log('\n‚úÖ Test completed successfully!');
    
  } catch (error: any) {
    console.error('\n‚ùå Test failed:', error.message);
    console.error('\nStack trace:', error.stack);
    process.exit(1);
  }
}

// „É°„Ç§„É≥ÂÆüË°å
testWorkflow().catch(console.error);